// this test code was generated by chatgpt using the starter code
#include <iostream>
#include "MultiSet.h"

int main() {
    // Create a MultiSet instance
    MultiSet ms1;
    MultiSet ms2;

    // Test inserting elements into ms1
    std::cout << "Inserting elements into ms1...\n";
    ms1.insert("apple", 3);
    ms1.insert("banana", 2);
    ms1.insert("cherry", 5);

    // Test inserting elements into ms2
    std::cout << "Inserting elements into ms2...\n";
    ms2.insert("banana", 1);
    ms2.insert("date", 4);
    ms2.insert("apple", 2);

    // Print ms1 and ms2
    std::cout << "ms1: " << ms1 << std::endl;
    std::cout << "ms2: " << ms2 << std::endl;

    // Test contains and count
    std::cout << "ms1 contains 'apple': " << ms1.contains("apple") << std::endl;
    std::cout << "ms1 count of 'banana': " << ms1.count("banana") << std::endl;
    std::cout << "ms2 count of 'cherry': " << ms2.count("cherry") << std::endl;

    // Test removing elements
    std::cout << "Removing 2 'apple' from ms1...\n";
    ms1.remove("apple", 2);
    std::cout << "ms1 after removal: " << ms1 << std::endl;

    // Test remove arbitrary elements
    std::cout << "Removing 2 arbitrary elements from ms2...\n";
    auto removed = ms2.remove(2);
    std::cout << "Removed elements from ms2: ";
    for (const auto& elem : removed) {
        std::cout << elem << " ";
    }
    std::cout << "\n";

    // Test union
    std::cout << "Union of ms1 and ms2: " << ms1.unionWith(ms2) << std::endl;

    // Test intersection
    std::cout << "Intersection of ms1 and ms2: " << ms1.intersectionWith(ms2) << std::endl;

    // Test difference
    std::cout << "Difference between ms1 and ms2: " << ms1.differenceWith(ms2) << std::endl;

    // Test symmetric difference
    std::cout << "Symmetric difference between ms1 and ms2: " << ms1.symmetricDifferenceWith(ms2) << std::endl;

    // Test unique keys
    std::cout << "Unique keys in ms1: ";
    for (const auto& key : ms1.uniqueKeys()) {
        std::cout << key << " ";
    }
    std::cout << std::endl;

    // Test clearing the MultiSet
    std::cout << "Clearing ms1...\n";
    ms1.clear();
    std::cout << "ms1 after clearing: " << ms1 << std::endl;

    return 0;
}

